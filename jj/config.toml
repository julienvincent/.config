[user]
name = "Julien Vincent"
email = "m@julienvincent.io"

[ui]
default-command = "logr"
diff-instructions = false

diff-editor = ["nvim", "-c", "DiffEditor $left $right $output"]

# This is wrapped in 'sh -c' so that I can expand the $HOME env var
pager = ["sh", "-c", "delta --config $HOME/.config/delta/config.ini"]
diff.format = "git"

[merge-tools.dt]
program = "difft"
diff-args = [
  "--color=always",
  "--tab-width=2",
  "--display=side-by-side",
  "$left",
  "$right",
]

[merge-tools.vim]
program = "nvim"
merge-args = [
  "-c",
  "let g:jj_diffconflicts_marker_length=$marker_length",
  "-c",
  "JJDiffConflicts!",
  "$output",
  "$base",
  "$left",
  "$right",
]
merge-tool-edits-conflict-markers = true

[aliases]
logr = ["log", "--reversed"]

log-oneline = ["log", "-T", "log_oneline_compact", "--no-graph"]
l = ["log-oneline", "-r", "::@ & ~merges()"]

fetch = ["git", "fetch"]
push = ["git", "push"]

[git]
auto-local-bookmark = true
push-bookmark-prefix = "jv/ref-"
push-new-bookmarks = true

[signing]
sign-all = true
backend = "ssh"
key = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFrtvt1/rcCsF7Jf4zgmu/vjRnzEXMlXzt8FmouxCxFH"
backends.ssh.allowed-signers = "~/.ssh/allowed-signers"

[colors]
current = { fg = "yellow", bg = "black", bold = true, underline = true }

[revset-aliases]

'local()' = 'trunk()..mine()'

[revsets]

log = "fork_point(trunk():: | @)::@ | trunk()"

[template-aliases]
'format_as_date(timestamp)' = 'timestamp.local().format("%Y-%m-%d")'

log_oneline_compact = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    concat(
      separate(" ",
        format_short_change_id_with_hidden_and_divergent_info(self),
        format_short_commit_id(commit_id),
        pad_end(10, truncate_end(10, author.email())),
        format_as_date(commit_timestamp(self)),
        bookmarks,
        tags,
        working_copies,
        if(git_head, label("git_head", "git_head()")),
        if(conflict, label("conflict", "conflict")),
        if(config("ui.show-cryptographic-signatures").as_boolean(),
          format_short_cryptographic_signature(signature)),
        if(empty, label("empty", "(empty)")),
        if(description,
          description.first_line(),
          label(if(empty, "empty"), description_placeholder),
        ),
      ) ++ "\n",
    ),
  )
)
'''
